create ec2 and  careate s3 bucket and attach to EC2 with in vpc using terraform
----------------------------------------------------------------------------------
# Define your AWS provider configuration
provider "aws" {
  region = "us-east-1"  # Set your desired AWS region
}

# Create a VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"  # Define the CIDR block for your VPC
}

# Create a subnet within the VPC
resource "aws_subnet" "my_subnet" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.0.0/24"  # Define a subnet CIDR block within your VPC
  availability_zone       = "us-east-1a"  # Set the desired availability zone
}

# Create an EC2 instance within the VPC and subnet
resource "aws_instance" "my_ec2" {
  ami           = "ami-0c55b159cbfafe1f0"  # Replace with the desired AMI ID
  instance_type = "t2.micro"  # Set the desired EC2 instance type
  subnet_id     = aws_subnet.my_subnet.id
  key_name      = "your-key-pair-name"  # Replace with your EC2 key pair name

  tags = {
    Name = "MyEC2Instance"
  }
}

# Create an S3 bucket
resource "aws_s3_bucket" "my_bucket" {
  bucket = "my-unique-bucket-name"  # Replace with your desired bucket name
  acl    = "private"  # Set the ACL for the bucket (private for this example)
}

# Attach an IAM role to the EC2 instance with S3 permissions
resource "aws_iam_instance_profile" "ec2_instance_profile" {
  name = "ec2_s3_profile"
  role = aws_iam_role.ec2_role.name
}

resource "aws_iam_role" "ec2_role" {
  name = "ec2_s3_role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

# Attach an inline policy to the IAM role granting access to the S3 bucket
resource "aws_iam_policy" "s3_policy" {
  name        = "s3_access_policy"
  description = "Policy for EC2 to access S3 bucket"
  
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "s3:GetObject",
          "s3:ListBucket",
        ],
        Effect   = "Allow",
        Resource = [
          aws_s3_bucket.my_bucket.arn,
          "${aws_s3_bucket.my_bucket.arn}/*",
        ],
      },
    ],
  })
}

resource "aws_iam_role_policy_attachment" "s3_policy_attachment" {
  policy_arn = aws_iam_policy.s3_policy.arn
  role       = aws_iam_role.ec2_role.name
}

# Associate the IAM role with the EC2 instance
resource "aws_instance_association" "s3_role_association" {
  instance_id    = aws_instance.my_ec2.id
  iam_instance_profile = aws_iam_instance_profile.ec2_instance_profile.name
}

Autoscaling with Terraform
------------------------------------------------------------------
provider "aws" {
  region = "us-east-1"  # Change this to your desired region
}

resource "aws_launch_configuration" "example" {
  name_prefix          = "example-"
  image_id             = "ami-12345678"  # Replace with your desired AMI ID
  instance_type        = "t2.micro"      # Replace with your desired instance type
  security_groups      = ["sg-01234567"] # Replace with your security group ID
  key_name             = "your-key-pair" # Replace with your key pair name
  user_data            = <<-EOF
    #!/bin/bash
    # Your user data script here
  EOF
}

resource "aws_autoscaling_group" "example" {
  name                 = "example-asg"
  launch_configuration = aws_launch_configuration.example.name
  min_size             = 2
  max_size             = 5
  desired_capacity     = 3
  availability_zones   = ["us-east-1a", "us-east-1b"]  # Specify your desired AZs
  target_group_arns    = ["arn:aws:elasticloadbalancing:us-east-1:123456789012:targetgroup/example-tg/1234567890abcdef0"]  # Replace with your target group ARN
}
